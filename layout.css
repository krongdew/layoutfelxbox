* {
    box-sizing: border-box;
  }

/* Style the body */
body {
    font-family: Arial;
    margin: 0;
  }
/* Header/logo Title */
.header {
    padding: 60px;
    text-align: center;
    background: #1abc9c;
    color: white;
  }
/* Style the top navigation bar */
.navbar {
    display: flex;
    background-color: #333;
  }  
/* Style the navigation bar links */
.navbar a {
    color: white;
    padding: 14px 20px;
    text-decoration: none;
    text-align: center;
  }
/* Change color on hover */
.navbar a:hover {
    background-color: #ddd;
    color: black;
  }
/* Column container */
.row {  
    display: flex;
    /*  items ภายใน .flex-container ที่ขนาดใหญ่เกินจะถูกจัดเรียงใหม่ในบรรทัดใหม่เพื่อให้พอดีกับพื้นทที่กำหนดไว้ และไม่เกินขอบเขตของ flex container */
    flex-wrap: wrap;
  }
/* Create two unequal columns that sits next to each other */
/* Sidebar/left column */
.side {
    flex: 30%;
    /* flex: 30%; เป็นการย่อของคุณสมบัติ flex-grow, flex-shrink, และ flex-basis ใน CSS Flexbox ที่ช่วยกำหนดความยืดหยุ่นขององค์ประกอบใน Flexbox ด้วยค่าที่ระบุ ณ ลำดับที่กำหนดไว้ ในกรณีนี้คือ 30%.
    flex: 30%; ค่าที่ระบุทั้ง 3 ค่าแทนค่าสำคัญของ flex-grow, flex-shrink, และ flex-basis ตามลำดับ
    30% คือค่าที่ใช้กำหนด flex item ว่าควรมีการขยายตัวและใช้พื้นที่เท่าไหร่ของพื้นที่ว่างของ flex container
    การกำหนด flex: 30%; ให้กับ flex item จะทำให้มันใช้ 30% ของพื้นที่ว่างภายใน flex container ซึ่งกำหนดโดย flex container โดยทั่วไปแล้ว การใช้ % แสดงถึงการใช้พื้นที่ตามเปอร์เซ็นต์เทียบกับพื้นที่ทั้งหมดของ flex container ซึ่งทำให้ item นั้นขยายตัวให้กว้างหรือสูงเป็น 30% ของพื้นที่ที่ flex container กำหนดไว้สำหรับ flex items ซึ่งมีการปรับขนาดได้ตามที่ flex container ปรับเปลี่ยนขนาด
    ยกตัวอย่างเช่น ถ้าคุณมี flex container กำหนดไว้ให้มีพื้นที่ทั้งหมดเป็น 1000px และคุณใช้ flex: 30%; บน flex item นั้นจะใช้พื้นที่ของ 300px (30% ของ 1000px) สำหรับการแสดงผลของ flex item นั้นๆ เท่านั้น โดยใช้ % เป็นการกำหนดตัวแปรเชิงสัดส่วนเทียบกับพื้นที่ทั้งหมดของ flex container ที่กำหนดไว้ไว้สำหรับ flex items ในโค้ด CSS นั้นๆ แต่อาจมีการปรับขนาดโดยอัตโนมัติเมื่อขนาดของ flex container เปลี่ยนแปลง ซึ่งทำให้ flex item ปรับขนาดตามได้ตามการกำหนดเปอร์เซ็นต์ของพื้นที่ที่กำหนดไว้สำหรับ flex items ใน container ที่เปลี่ยนแปลงไปและเพิ่มความยืดหยุ่นให้กับการจัดวางของ element ใน Flexbox. */
    
    /* flex-grow: ค่านี้กำหนดอัตราส่วนของพื้นที่ว่างที่ flex item สามารถใช้เมื่อพื้นที่เหลือใน flex container ซึ่งยังไม่ถูกใช้งานหมด. ค่าเริ่มต้นคือ 0 และถ้าค่า flex-grow ของ flex item คือ 1 และค่า flex-grow ของ flex item อีกตัวคือ 2 จะแสดงว่า flex item แรกจะใช้พื้นที่ที่เหลือเป็น 1 ส่วน และ flex item ที่สองจะใช้พื้นที่ที่เหลือเป็น 2 ส่วน. ค่าเริ่มต้นของ flex-grow คือ 0.

    flex-shrink: กำหนดความสามารถในการหดตัวของ flex item เมื่อพื้นที่ไม่เพียงพอใน flex container โดยค่า flex-shrink นั้นหมายถึงความสามารถในการลดขนาดของ flex item เมื่อพื้นที่น้อยลง ค่าที่ส่งผลต่อการย่อตัวของ flex item จะคำนึงถึงค่า flex-shrink และค่าขนาดของ flex item และพื้นที่ที่เหลือใน flex container.

    flex-basis: กำหนดขนาดเริ่มต้น (initial size) ของ flex item ก่อนที่ flex-grow และ flex-shrink จะเข้ามาเกี่ยวข้อง. ค่านี้จะกำหนดขนาดเริ่มต้นของ flex item โดยประการที่ไม่คำนึงถึง flex-grow และ flex-shrink ซึ่งถ้าไม่ได้กำหนดจะใช้ค่า default ที่เป็น auto (ขนาดเริ่มต้นจะเป็นขนาดของ content ภายใน flex item) */
    background-color: #f1f1f1;
    padding: 20px;
  }
  /* Main column */
.main {
    flex: 70%;
    /* รวมแล้วต้องไม่เกิน 100% ถ้าเกินก็จะทำการ wrap ลงมา */
    background-color: white;
    padding: 20px;
  }
/* Fake image, just for this example */
.fakeimg {
    background-color: #aaa;
    width: 100%;
    padding: 20px;
  }
/* Footer */
.footer {
    padding: 20px;
    text-align: center;
    background: #ddd;
  }
/* Responsive layout - when the screen is less than 700px wide, make the two columns stack on top of each other instead of next to each other */
@media screen and (max-width: 700px) {
    .row, .navbar {   
      flex-direction: column;
    }
  }